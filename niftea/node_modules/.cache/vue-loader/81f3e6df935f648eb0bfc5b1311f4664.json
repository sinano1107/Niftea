{"remainingRequest":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/choumasateru/Desktop/development_direction/vue/niftea/src/components/Timeline.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/src/components/Timeline.vue","mtime":1578226723254},{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/choumasateru/Desktop/development_direction/vue/niftea/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnCmltcG9ydCAnZmlyZWJhc2UvZGF0YWJhc2UnCmltcG9ydCAnZmlyZWJhc2Uvc3RvcmFnZScKaW1wb3J0IEluZGV0ZXJtaW5hdGUgZnJvbSAnLi9JbmRldGVybWluYXRlJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICBwb3N0TGlzdDogW10sCiAgICAgIHVzZXJzRGF0YToge30sCiAgICAgIGltZ1VSTDoge30KICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIEluZGV0ZXJtaW5hdGUKICB9LAogIGNyZWF0ZWQoKSB7CiAgICAvLyDjgoHjgaPjgaHjgoPjgqjjg6njg7zotbfjgY3jgovjgZHjgalzZXRUaW1lb3V044Gn44GU44KK5oq844GX44GX44Gm44G+44GZIOOBquOCk+OBi+iJr+OBhOino+axuuazleOBquOBhOOBi+OBqiA8PSBhc3luYy9hd2FpdAogICAgLy8gZmlyZWJhc2Xjgajjga7pgJrkv6HntYLjgo/jgaPjgabjgYvjgok8dGVtcGxhdGU+6Kqt44G/6L6844KA44KI44GG44Gr44GZ44KM44Gw6Imv44GE44KT44Gg44Go5oCd44GGCiAgICAvLyBQcm9taXNl44Gn44Or44O844OX5Yem55CG44GZ44KL44Gf44KB44Gr44Gq44KT44GL5aSJ44Gq44Gu5L2/44Gj44Gm44KLIFByb21pc2Xkvb/jgaPjgabjgovjgY/jgZvjgavopovpgJrjgZfjgq/jgr3jgafjgZkKICAgIC8vIOOCveODvOOCuSA9PiAnaHR0cHM6Ly9ibG9nLmh0bWxoaWZpdmUuY29tLzIwMTYvMDIvMjIvcHJvbWlzZS1hc3luYy1sb29wLycKICAgIGxldCBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCkKICAgIGxldCBzdG9yYWdlID0gZmlyZWJhc2Uuc3RvcmFnZSgpCiAgICBsZXQgc2VsZiA9IHRoaXMKCiAgICAvLyBQcm9taXNl44Gn6Z2e5ZCM5pyf5Yem55CG44GZ44KL44K+CiAgICBsZXQgcmVzdWx0ID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAvLyBwb3N0c0RhdGEodWlkLCBjb250ZW50KeOBruWPluW+lwogICAgICBsZXQgcG9zdHMgPSBkYXRhYmFzZS5yZWYoJy9wb3N0cycpCiAgICAgIHBvc3RzLm9uKCd2YWx1ZScsIChzbmFwc2hvdCk9PiB7CiAgICAgICAgbGV0IHBvc3RMaXN0ID0gW10KICAgICAgICBsZXQgdmFsID0gc25hcHNob3QudmFsKCkKICAgICAgICAvLyDpgKPmg7PphY3liJfjgpLjg6vjg7zjg5fjgaflsZXplovjgZfjgabphY3liJfjgavjgZnjgosKICAgICAgICBPYmplY3Qua2V5cyh2YWwpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBwb3N0TGlzdC5wdXNoKHZhbFtrZXldKQogICAgICAgIH0pCiAgICAgICAgY29uc29sZS5kZWJ1Zyh2YWwpCiAgICAgICAgY29uc29sZS5kZWJ1Zyhwb3N0TGlzdCkKICAgICAgICBzZWxmLnBvc3RMaXN0ID0gcG9zdExpc3QucmV2ZXJzZSgpIC8vIHRoaXMucG9zdExpc3Tjgavku6PlhaUg44Gk44GE44Gn44Gr5Y+N6LuiCiAgICAgICAgLy9yZXNvbHZlKHZhbCkKICAgICAgICByZXNvbHZlKHBvc3RMaXN0KQoKICAgICAgfSkKICAgIH0pCiAgICByZXN1bHQudGhlbiggZnVuY3Rpb24oZGF0YXMpIHsKICAgICAgY29uc29sZS5kZWJ1ZyhkYXRhcykKICAgICAgLy8g44OH44O844K/44OZ44O844K544GucG9zdHPjgpLlj5fjgZHlj5bjgorjg6vjg7zjg5fjgaflsZXplovjgZfjgaZ1aWTjgpLlj5blvpcg44Gd44KM44GrZmlsdGVy44GL44GR44Gm5qyh44Gr5Zue44GZCiAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcykgewogICAgICAgIGxldCBsaXN0ID0gW10KICAgICAgICAvLyDjgZPjgZPjgavjg6vjg7zjg5fjgZXjgZvjgovplqLmlbAKICAgICAgICAvLyBkYXRhc+OBrmRhdGHjgpLlj5fjgZHlj5bjgaPjgaZ1aWTjgpLov5TjgZkKICAgICAgICBmdW5jdGlvbiBtYWtlTGlzdChpbmRleCkgewogICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHsKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhkYXRhc1tpbmRleF0pCiAgICAgICAgICAgIGxpc3QucHVzaChkYXRhc1tpbmRleF0udWlkKQogICAgICAgICAgICByZXNvbHZlKGluZGV4Kz0xKQogICAgICAgICAgfSkudGhlbihmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgICAvLyDjg6vjg7zjg5fjgpLmipzjgZHjgovjgYvjga7liKTlrpoKICAgICAgICAgICAgaWYgKGluZGV4ID49IGRhdGFzLmxlbmd0aCkgewogICAgICAgICAgICAgIC8vIOaKnOOBkeOCiyDph43opIfjgpLlvL7jgY8KICAgICAgICAgICAgICBsaXN0ID0gbGlzdC5maWx0ZXIoKHgsaSxzZWxmKSA9PiBzZWxmLmluZGV4T2YoeCkgPT09IGkpCiAgICAgICAgICAgICAgcmVzKGxpc3QpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8g5YaN6LW355qE44Gr5a6f6KGMCiAgICAgICAgICAgICAgbWFrZUxpc3QoaW5kZXgpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgfQogICAgICAgIC8vIOWIneWbnuWun+ihjAogICAgICAgIG1ha2VMaXN0KDApCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24obGlzdCkgewogICAgICAgIGNvbnNvbGUuZGVidWcobGlzdCkKICAgICAgICAvLyDlj5fjgZHlj5bjgaPjgZ91aWTjga5saXN044KS44Or44O844OX44GX44GmZmlyZWJhc2XjgYvjgonjg4fjg7zjgr/jgpLlj5blvpcgdGhpcy51c2Vyc0RhdGHjgavjgbbjgaHovrzjgoAKICAgICAgICBsZXQgaW1nTGlzdCA9IFtdCiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICBmdW5jdGlvbiBnZXRVc2VyRGF0YShpbmRleCkgewogICAgICAgICAgICBsZXQgdWlkID0gbGlzdFtpbmRleF0KICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHsKICAgICAgICAgICAgICBsZXQgdXNlciA9IGRhdGFiYXNlLnJlZihgL3VzZXJzLyR7dWlkfWApCiAgICAgICAgICAgICAgdXNlci5vbigndmFsdWUnLCAoc25hcHNob3QpPT4gewogICAgICAgICAgICAgICAgbGV0IHZhbCA9IHNuYXBzaG90LnZhbCgpCiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKHVpZCkKICAgICAgICAgICAgICAgIHNlbGYudXNlcnNEYXRhW3VpZF0gPSB2YWwKICAgICAgICAgICAgICAgIGltZ0xpc3QucHVzaCh2YWwuaW1nKQogICAgICAgICAgICAgICAgcmVzb2x2ZShpbmRleCs9MSkKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAvLyDmipzjgZHjgosgZmlsdGVy44GL44GR44KLCiAgICAgICAgICAgICAgICBpbWdMaXN0ID0gaW1nTGlzdC5maWx0ZXIoKHgsaSxzZWxmKSA9PiBzZWxmLmluZGV4T2YoeCkgPT09IGkpCiAgICAgICAgICAgICAgICByZXMoaW1nTGlzdCkKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZ2V0VXNlckRhdGEoaW5kZXgpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgfQogICAgICAgICAgLy8g5Yid5Zue5a6f6KGMCiAgICAgICAgICBnZXRVc2VyRGF0YSgwKQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oaW1nTGlzdCkgewogICAgICAgICAgY29uc29sZS5kZWJ1ZyhpbWdMaXN0KQogICAgICAgICAgLy8g5Y+X44GR5Y+W44Gj44GfaW1nTGlzdOOCkuWxlemWi+OBl+OBplVSTOOCkuWPluW+l+OBmeOCiyB0aGlzLmltZ1VSTOOBq3t1aWQ6IOWPluW+l+OBl+OBn1VSTH3jga7lvaLjgafjgbbjgaHovrzjgoAKICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICBmdW5jdGlvbiBnZXRJbWdVUkwoaW5kZXgpIHsKICAgICAgICAgICAgICBsZXQgaW1nID0gaW1nTGlzdFtpbmRleF0KICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgLy8gVVJM5Y+W5b6XCiAgICAgICAgICAgICAgICBsZXQgaW1nUmVmID0gc3RvcmFnZS5yZWYoYC8ke2ltZ31gKQogICAgICAgICAgICAgICAgaW1nUmVmLmdldERvd25sb2FkVVJMKCkudGhlbigodXJsKT0+IHsKICAgICAgICAgICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpCiAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYicKICAgICAgICAgICAgICAgICAgeGhyLm9ubG9hZCA9ICgpPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBibG9iID0geGhyLnJlc3BvbnNlCiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbWdVUkxbaW1nXSA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsKQogICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpCiAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW5kZXgrPTEpCiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJHZXRJbWdVUkwgRXJyb3IiLGVycm9yKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gaW1nTGlzdC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgLy8g5oqc44GR44KLCiAgICAgICAgICAgICAgICAgIHJlcygpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBnZXRJbWdVUkwoaW5kZXgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDliJ3lm57lrp/ooYwKICAgICAgICAgICAgZ2V0SW1nVVJMKDApCiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvLyDlh6bnkIbntYLkuoYg57WQ5p6c44Gu44Ot44Kw5Ye65YqbIOOBlOOCiuaKvOOBl3NldFRpbWVvdXQKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygiR2V0VGltZUxpbmVGaW5pc2ghISEiKQogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJwb3N0TGlzdCIsIHNlbGYucG9zdExpc3QpCiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoInVzZXJzRGF0YSIsIHNlbGYudXNlcnNEYXRhKQogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJpbWdVUkwiLCBzZWxmLmltZ1VSTCkKICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICB9KQogICAgfSkKICB9LAp9Cg=="},{"version":3,"sources":["Timeline.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Timeline.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <Indeterminate v-if=\"loading\"/>\n    <v-timeline v-else dense>\n      <v-timeline-item v-for=\"(item, i) in postList\" :key=\"i\" large>\n        <template v-slot:icon>\n          <v-avatar>\n            <img :src=\"imgURL[usersData[item.uid].img]\">\n          </v-avatar>\n        </template>\n        <template v-slot:opposite>\n          <span>Tus eu perfecto</span>\n        </template>\n        <v-card class=\"elevation-2\">\n          <v-card-title class=\"headline\">{{ usersData[item.uid].name }}</v-card-title>\n          <v-card-text class=\"content\">{{ item.content }}\n          </v-card-text>\n\n        </v-card>\n      </v-timeline-item>\n  </v-timeline>\n  </div>\n\n</template>\n\n<script>\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/storage'\nimport Indeterminate from './Indeterminate'\n\nexport default {\n  data() {\n    return {\n      loading: true,\n      postList: [],\n      usersData: {},\n      imgURL: {}\n    }\n  },\n  components: {\n    Indeterminate\n  },\n  created() {\n    // めっちゃエラー起きるけどsetTimeoutでごり押ししてます なんか良い解決法ないかな <= async/await\n    // firebaseとの通信終わってから<template>読み込むようにすれば良いんだと思う\n    // Promiseでループ処理するためになんか変なの使ってる Promise使ってるくせに見通しクソです\n    // ソース => 'https://blog.htmlhifive.com/2016/02/22/promise-async-loop/'\n    let database = firebase.database()\n    let storage = firebase.storage()\n    let self = this\n\n    // Promiseで非同期処理するゾ\n    let result = new Promise(function(resolve) {\n      // postsData(uid, content)の取得\n      let posts = database.ref('/posts')\n      posts.on('value', (snapshot)=> {\n        let postList = []\n        let val = snapshot.val()\n        // 連想配列をループで展開して配列にする\n        Object.keys(val).forEach(function(key) {\n          postList.push(val[key])\n        })\n        console.debug(val)\n        console.debug(postList)\n        self.postList = postList.reverse() // this.postListに代入 ついでに反転\n        //resolve(val)\n        resolve(postList)\n\n      })\n    })\n    result.then( function(datas) {\n      console.debug(datas)\n      // データベースのpostsを受け取りループで展開してuidを取得 それにfilterかけて次に回す\n      new Promise(function(res) {\n        let list = []\n        // ここにループさせる関数\n        // datasのdataを受け取ってuidを返す\n        function makeList(index) {\n          return new Promise(function(resolve) {\n            console.debug(datas[index])\n            list.push(datas[index].uid)\n            resolve(index+=1)\n          }).then(function(index) {\n            // ループを抜けるかの判定\n            if (index >= datas.length) {\n              // 抜ける 重複を弾く\n              list = list.filter((x,i,self) => self.indexOf(x) === i)\n              res(list)\n            } else {\n              // 再起的に実行\n              makeList(index)\n            }\n          })\n        }\n        // 初回実行\n        makeList(0)\n      }).then(function(list) {\n        console.debug(list)\n        // 受け取ったuidのlistをループしてfirebaseからデータを取得 this.usersDataにぶち込む\n        let imgList = []\n        new Promise(function(res) {\n          function getUserData(index) {\n            let uid = list[index]\n            return new Promise(function(resolve) {\n              let user = database.ref(`/users/${uid}`)\n              user.on('value', (snapshot)=> {\n                let val = snapshot.val()\n                console.debug(uid)\n                self.usersData[uid] = val\n                imgList.push(val.img)\n                resolve(index+=1)\n              })\n            }).then(function(index) {\n              if (index >= list.length) {\n                // 抜ける filterかける\n                imgList = imgList.filter((x,i,self) => self.indexOf(x) === i)\n                res(imgList)\n              } else {\n                getUserData(index)\n              }\n            })\n          }\n          // 初回実行\n          getUserData(0)\n        }).then(function(imgList) {\n          console.debug(imgList)\n          // 受け取ったimgListを展開してURLを取得する this.imgURLに{uid: 取得したURL}の形でぶち込む\n          new Promise(function(res) {\n            function getImgURL(index) {\n              let img = imgList[index]\n              return new Promise(function(resolve) {\n                // URL取得\n                let imgRef = storage.ref(`/${img}`)\n                imgRef.getDownloadURL().then((url)=> {\n                  let xhr = new XMLHttpRequest()\n                  xhr.responseType = 'blob'\n                  xhr.onload = ()=> {\n                    let blob = xhr.response\n                    self.imgURL[img] = URL.createObjectURL(blob)\n                  }\n                  xhr.open('GET', url)\n                  xhr.send()\n                  resolve(index+=1)\n                }).catch(function(error) {\n                  console.debug(\"GetImgURL Error\",error)\n                })\n              }).then(function(index) {\n                if (index >= imgList.length) {\n                  // 抜ける\n                  res()\n                } else {\n                  getImgURL(index)\n                }\n              })\n            }\n            // 初回実行\n            getImgURL(0)\n          }).then(function() {\n            // 処理終了 結果のログ出力 ごり押しsetTimeout\n            console.debug(\"GetTimeLineFinish!!!\")\n            console.debug(\"postList\", self.postList)\n            console.debug(\"usersData\", self.usersData)\n            console.debug(\"imgURL\", self.imgURL)\n            setTimeout(() => {\n              self.loading = false;\n            }, 1000);\n          })\n        })\n      })\n    })\n  },\n}\n</script>\n\n<style scoped>\n.content {\n  white-space: pre-wrap;\n}\n</style>\n"]}]}